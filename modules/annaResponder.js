const OpenAI = require("openai");

// Az eg√©sz modult egy export√°lt f√ºggv√©nyen bel√ºl tedd!
module.exports = function attachAnnaResponder(client, userId, excludedUserIds) {
  let activeUserId = null;
  let lastActive = null;
  let sessionTimeout = null;
  const TIMEOUT_MS = 30000;
  const userQuestionLimits = {};
  const MAX_QUESTIONS_PER_DAY = 5;

  const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

  // Helper a session timeout kezel√©s√©hez:
  function startSessionTimeout(channel) {
    if (sessionTimeout) clearTimeout(sessionTimeout);
    sessionTimeout = setTimeout(async () => {
      if (activeUserId) {
        try {
          await channel.send('Letelt az id≈ë, k√∂sz√∂n√∂m a besz√©lget√©st! Ha √∫jra szeretn√©l k√©rdezni, √≠rd, hogy "Szia Anna"! üòä');
        } catch (err) { }
        activeUserId = null;
        lastActive = null;
        sessionTimeout = null;
      }
    }, TIMEOUT_MS);
  }

  // --- MINDEN ESEM√âNYKEZEL≈ê EZEN A F√úGGV√âNYEN BEL√úL! ---
  client.on('messageCreate', async (message) => {
    if (message.author.bot) return;

    const userId = message.author.id;
    const contentLower = message.content.toLowerCase().trim();
    const today = new Date().toISOString().slice(0, 10);

    if (!userQuestionLimits[userId] || userQuestionLimits[userId].date !== today) {
      userQuestionLimits[userId] = { date: today, count: 0, warned: false };
    }

    const thanksRegex = /^k(√∂|o)sz(i|√∂n√∂m)?\s+anna\b/i;
    const greetRegex = /^szia\s+anna\b/i;

    // "K√∂szi Anna" eset√©n v√©ge!
    if (
      activeUserId &&
      userId === activeUserId &&
      thanksRegex.test(contentLower)
    ) {
      activeUserId = null;
      lastActive = null;
      if (sessionTimeout) clearTimeout(sessionTimeout);
      sessionTimeout = null;
      try {
        await message.channel.send(`Sz√≠vesen! Ha b√°rmi kell, csak sz√≥lj! üòâ`);
      } catch (error) {
        console.error('Nem tudok v√°laszolni a sz√≠vesen-nel:', error);
      }
      return;
    }

    // NAPI LIMIT
    if (activeUserId && userId === activeUserId && userQuestionLimits[userId].count >= MAX_QUESTIONS_PER_DAY) {
      if (!userQuestionLimits[userId].warned) {
        await message.channel.send(`El√©rted a napi ${MAX_QUESTIONS_PER_DAY} k√©rd√©s limitet. Holnap √∫jra k√©rdezhetsz!`);
        userQuestionLimits[userId].warned = true;
      }
      return;
    }

    // --- EZ A R√âSZ AZ √öJ FUNKCI√ì! ---
    // Ha van akt√≠v session √©s egy M√ÅS user √≠rja, hogy "Szia Anna":
    if (activeUserId && userId !== activeUserId && greetRegex.test(contentLower)) {
      await message.channel.send('Bocs√°nat, most √©ppen m√°ssal besz√©lgetek! Amint v√©geztem, √∫jra √≠rhatsz egy ‚ÄúSzia Anna‚Äù-t √©s seg√≠tek neked is! üòä');
      return;
    }

    // √öj session ind√≠t√°sa csak, ha nincs akt√≠v user!
    if (!activeUserId && greetRegex.test(contentLower)) {
      activeUserId = userId;
      lastActive = Date.now();
      await message.channel.send(`Szia! Miben seg√≠thetek? üòä`);
      startSessionTimeout(message.channel);
      return;
    }

    // Ha session akt√≠v, de NEM ≈ë √≠r (√©s nem pr√≥b√°l "szia anna"-t), ignor√°ljuk
    if (activeUserId && userId !== activeUserId) {
      return;
    }

    // Akt√≠v user k√©rdez
    if (activeUserId && userId === activeUserId) {
      userQuestionLimits[userId].count += 1;
      lastActive = Date.now();
      startSessionTimeout(message.channel);

      try {
        const response = await openai.chat.completions.create({
          model: "gpt-4o-mini",
          messages: [
            { role: "system", content: "Te vagy Anna, egy kedves seg√≠t≈ëk√©sz asszisztens." },
            { role: "user", content: message.content }
          ],
        });
        const answer = response.choices[0].message.content.trim();
        await message.channel.send(answer);
      } catch (error) {
        await message.channel.send('Sajn√°lom, valami hiba t√∂rt√©nt a v√°laszad√°s k√∂zben.');
      }
      return;
    }
  });
};
